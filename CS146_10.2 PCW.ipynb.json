{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pre-class work\n",
    "\n",
    "These notes work through the motivation behind testing a model we have seen before. Use the notes to refresh your memory of this particular model, make sure you understand the choice of test statistic used below, and write Python code to compute the p-value for the test statistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model and dataset\n",
    "\n",
    "In a previous class session, we modeled the dataset shown below using a **normal likelihood with unknown mean and variance** and a **conjugate normal-inverse-gamma prior** over the parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load data: read the particle sizes (in nanometers) from a CSV file.\n",
    "# Log-transform the data so we can model it using a normal likelihood.\n",
    "data = np.log(np.loadtxt('hrtem.csv'))\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.hist(data, bins=20, density=True, alpha=0.5)\n",
    "plt.title('Histogram of dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model was as follows.\n",
    "\n",
    "* Data: $\\{y_i\\}$\n",
    "* Parameters: mean $x$, variance $\\sigma^2$\n",
    "* Likelihood: $y_i \\sim \\text{Normal}(x, \\sigma^2)$\n",
    "* Prior: $(\\mu,\\sigma^2) \\sim \\text{Normal-Inverse-Gamma}(\\mu_0,\\nu_0,\\alpha_0,\\beta_0)$\n",
    "\n",
    "The prior hyperparameter values are given below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Posterior hyperparameters:\n",
      "  μ₀ = 2.3\n",
      "  ν₀ = 0.1\n",
      "  α₀ = 2\n",
      "  β₀ = 5\n"
     ]
    }
   ],
   "source": [
    "mu_0 = 2.3\n",
    "nu_0 = 0.1\n",
    "alpha_0 = 2\n",
    "beta_0 = 5\n",
    "\n",
    "print('Posterior hyperparameters:')\n",
    "print('  μ₀ =', mu_0)\n",
    "print('  ν₀ =', nu_0)\n",
    "print('  α₀ =', alpha_0)\n",
    "print('  β₀ =', beta_0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the prior is conjugate to the likelihood, the posterior is also a Normal-Inverse-Gamma distribution. The posterior hyperparameters are calculated below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Posterior hyperparameters:\n",
      "  μ₁ = 1.892401480510831\n",
      "  ν₁ = 500.1\n",
      "  α₁ = 252.0\n",
      "  β₁ = 124.45079772182757\n"
     ]
    }
   ],
   "source": [
    "# Sufficient statistics of the data\n",
    "s0 = len(data)\n",
    "s1 = sum(data)\n",
    "s2 = sum(data ** 2)\n",
    "\n",
    "# Posterior parameters\n",
    "mu_1 = (nu_0 * mu_0 + s1) / (nu_0 + s0)\n",
    "nu_1 = nu_0 + s0\n",
    "alpha_1 = alpha_0 + s0 / 2\n",
    "beta_1 = beta_0 + s2/2 - s1**2 / (2*s0) + s0*nu_0/(nu_1 + s0) * (s1/s0 - mu_0)**2/2\n",
    "\n",
    "print('Posterior hyperparameters:')\n",
    "print('  μ₁ =', mu_1)\n",
    "print('  ν₁ =', nu_1)\n",
    "print('  α₁ =', alpha_1)\n",
    "print('  β₁ =', beta_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**One criticism against this model** is that it looks like the data distribution might be bimodal rather than unimodal, which would make a normal likelihood inappropriate. Let’s design a test statistic to check whether this bimodal appearance is really statistically significant or not."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test statistic\n",
    "\n",
    "Our test statistic is the proportion of data values that lie within one standard deviation of the mean of the dataset.\n",
    "\n",
    "So, given a dataset $\\{y_i\\}$, we compute the sample mean $\\bar{\\mu}$ and sample standard deviation $\\bar{\\sigma}$. We then count the proportion of data values that lie in the range $[\\bar{\\mu}-\\bar{\\sigma}, \\bar{\\mu}+\\bar{\\sigma}]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_statistic(data):\n",
    "    mu = np.mean(data)  # sample mean\n",
    "    sigma = np.std(data, ddof=1)  # sample standard deviation\n",
    "    return np.mean((data > mu - sigma) & (data < mu + sigma))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a normally distributed dataset, we expect approximately 68% of the data to lie within one standard deviation of the mean. For a bimodal dataset with equal probability mass in the two modes, we expect far fewer values to lie in this range since there is a gap between the modes.\n",
    "\n",
    "Here is an example to demonstrate why."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate samples from a mixture of two normal distributions\n",
    "N = 1000\n",
    "x = np.concatenate((stats.norm.rvs(loc=-2, scale=1, size=1000), stats.norm.rvs(loc=2, scale=1, size=1000)))\n",
    "mu = np.mean(x)  # sample mean\n",
    "sigma = np.std(x, ddof=1)  # sample standard deviation\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.hist(x, bins=20, alpha=0.5, density=True)\n",
    "plt.axvline(mu - sigma, color='black')\n",
    "plt.axvline(mu + sigma, color='black')\n",
    "plt.title('Proportion of data in range [μ–σ, μ+σ]: %.3f' % test_statistic(x))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The black lines show the mean plus and minus one standard deviation.\n",
    "\n",
    "In this case, 60.2% of the data lie between the black lines. \n",
    "\n",
    "If we apply this test statistic to the original dataset, we get the following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mu = np.mean(data)\n",
    "sigma = np.std(data)\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.hist(data, bins=20, alpha=0.5, density=True)\n",
    "plt.axvline(mu - sigma, color='black')\n",
    "plt.axvline(mu + sigma, color='black')\n",
    "plt.title('Proportion of data in range [μ–σ, μ+σ]: %.3f' % test_statistic(data))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the test statistic evaluated on the real dataset is 0.640. But is this statistically significantly different from the expected value, which is 0.680 if we assume normally distributed data in our model?\n",
    "\n",
    "We can only answer this question by comparing the test statistic for the real dataset (0.640) to the test statistic on replicated data from the posterior predictive distribution of our model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task: Calculate the p-value\n",
    "\n",
    "* Generate samples from the posterior predictive distribution and compute the test statistic for each replicated dataset.\n",
    "* Plot a histogram of the test statistic on the replicated datasets.\n",
    "* Plot a vertical line on the histogram to show value of the test statistic on the real dataset (0.640).\n",
    "* Compute the p-value as the proportion of replicated test statistic values that are greater than the real test statistic value.\n",
    "\n",
    "### How to generate samples\n",
    "\n",
    "* Generate 1000 (or more) samples of $(x,\\sigma^2)$ from the posterior Normal-Inverse-Gamma distribution.\n",
    "* For each sample from the posterior, generate a replicated dataset $\\{y^{\\text{(rep)}}_i\\}$ with the same size (the same number of data points) as the real dataset. It is important the each replicated dataset has the same size as the real dataset, to make sure their statistical behavior is the same.\n",
    "* Compute the test statistic for each replicated dataset to get the samples from the replicated test statistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.47874842598594075"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def norminvgamma_rvs(mu, nu, alpha, beta, size=1000):\n",
    "    '''\n",
    "    Generate n samples from the normal-inverse-gamma distribution. This function\n",
    "    returns a (size x 2) matrix where each row contains a sample, (x, sigma2).\n",
    "    '''\n",
    "    sigma2 = stats.invgamma.rvs(a=alpha, scale=beta, size=size)  # Sample sigma^2 from the inverse-gamma\n",
    "    x = stats.norm.rvs(loc=mu, scale=np.sqrt(sigma2 / nu), size=size)  # Sample x from the normal\n",
    "    return np.vstack((x, sigma2)).transpose()\n",
    "para = norminvgamma_rvs(mu_1, nu_1, alpha_1, beta_1, size=1000)\n",
    "para[1][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "996\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rep_data = [[] for _ in range(1000)]\n",
    "result = []\n",
    "for i in range(1000):\n",
    "    rep_data[i] = stats.norm.rvs(loc = para[i][0], scale = np.sqrt(para[i][1]), size = 500)\n",
    "    result.append(test_statistic(rep_data[i]))\n",
    "plt.hist(result, bins = 20)\n",
    "plt.axvline(0.64, color = 'red')\n",
    "print(sum(np.array(result) > 0.64))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for j in range(10):\n",
    "    plt.hist(rep_data[j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
