{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as sts\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "e = 0.5\n",
    "\n",
    "store = [0]\n",
    "for i in range(10000):\n",
    "    x = sts.norm.rvs(store[i] , e**2)\n",
    "    p_x = 0.5*sts.norm.pdf(x, -4, 0.5**2) + 0.5*sts.norm.pdf (x, 4, 1)\n",
    "    p_xt = 0.5*sts.norm.pdf(store[i], -4, 0.5**2) + 0.5*sts.norm.pdf (store[i], 4, 1)\n",
    "    q_x = sts.norm.pdf(x, store[i], e**2)\n",
    "    q_xt = sts.norm.pdf(store[i], x, e**2)\n",
    "    acc_rate = p_x/p_xt * q_xt/q_x\n",
    "    u = random.random()\n",
    "    if min(1,acc_rate) >= u:\n",
    "        store.append(x)\n",
    "    else:\n",
    "        store.append(store[-1])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.1974598222500588e-05"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a24316b70>]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0,1,1000)\n",
    "x_1 = np.linspace(-10,10,100000)\n",
    "plt.plot(x_1, sts.norm.pdf(x_1, -4, 0.5**2)/2 + sts.norm.pdf (x_1, 4, 1)/2 )\n",
    "plt.plot(store[0:1000],x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.002468094905670427"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.norm.pdf(2,100,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
